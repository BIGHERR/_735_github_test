#include "main.h"
#include "MDR32F9Qx_config.h"
#include "MDR32F9Qx_board.h"
#include "MDR32F9Qx_rst_clk.h"
#include "MDR32F9Qx_port.h"
#include <stdint.h>
#include <stdio.h>
#include "mstn_clk.h"

void clk_CoreConfig(void);
void button_Init(void);
bool button_State(void);


int main()
{   
    //clk_CoreConfig();
    button_Init();
    uint32_t counter = 0;
    uint8_t symbol = 0, numbBit = 0;
    
    while(1) {
        while (!button_State() == true) {
            counter++;
            Delay(500);
        }
        if (counter > 0) {
            if (counter == 1) {
                symbol |= (0 << numbBit);
                numbBit++;
            }
            else {
                symbol |= (1 << numbBit);
                numbBit++;
            }
            if (numbBit == 8) {
                numbBit = 0;
                symbol = 0;
            }
        }
        if (symbol != 0 && counter != 0) {
            printf("Symbol: %d numbBit: %d \n", symbol, numbBit);
        }
        counter = 0;
    }
}

void clk_CoreConfig(void)
{
 //Реинициализация настроек тактирования
 //RST_CLK_DeInit();
 //Включение тактирования от внешнего источника HSE (High Speed External)
 RST_CLK_HSEconfig(RST_CLK_HSE_ON);
 //Проверка статуса HSE
 if (RST_CLK_HSEstatus() == ERROR) while (1);
 //Настройка делителя/умножителя частоты CPU_PLL(фазовая подстройка частоты)
 RST_CLK_CPU_PLLconfig(RST_CLK_CPU_PLLsrcHSEdiv1, RST_CLK_CPU_PLLmul10);
 //Включение CPU_PLL
 RST_CLK_CPU_PLLcmd(ENABLE);
 //Проверка статуса CPU_PLL
 if (RST_CLK_CPU_PLLstatus() == ERROR) while (1);
 //Коммутация выхода CPU_PLL на вход CPU_C3
 RST_CLK_CPU_PLLuse(ENABLE);
 //Выбор источника тактирования ядра процессора
 RST_CLK_CPUclkSelection(RST_CLK_CPUclkCPU_C3);
 //Подача тактовой частоты на PORTC, PORTD
 RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTC, ENABLE);
 RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTD, ENABLE);
} 

void button_Init(void)
{
 //Создание структуры для инициализации порта
 PORT_InitTypeDef PORT_InitStructure;
 //Настройки порта: ввод, функция ввода/вывода, цифровой режим, минимальная скорость, Pin5
 PORT_InitStructure.PORT_OE = PORT_OE_IN;
 PORT_InitStructure.PORT_FUNC = PORT_FUNC_PORT;
 PORT_InitStructure.PORT_MODE = PORT_MODE_DIGITAL;
 PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;
 PORT_InitStructure.PORT_Pin = (PORT_Pin_5);

 PORT_Init(MDR_PORTD, &PORT_InitStructure);
}
//Функция считывания текущего состояния кнопки SA4
bool button_State(void)
{
 return PORT_ReadInputDataBit(MDR_PORTD, PORT_Pin_5);
} 